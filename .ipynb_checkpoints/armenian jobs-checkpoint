{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_csv('online-job-postings.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 19001 entries, 0 to 19000\n",
      "Data columns (total 24 columns):\n",
      "jobpost             19001 non-null object\n",
      "date                19001 non-null object\n",
      "Title               18973 non-null object\n",
      "Company             18994 non-null object\n",
      "AnnouncementCode    1208 non-null object\n",
      "Term                7676 non-null object\n",
      "Eligibility         4930 non-null object\n",
      "Audience            640 non-null object\n",
      "StartDate           9675 non-null object\n",
      "Duration            10798 non-null object\n",
      "Location            18969 non-null object\n",
      "JobDescription      15109 non-null object\n",
      "JobRequirment       16479 non-null object\n",
      "RequiredQual        18517 non-null object\n",
      "Salary              9622 non-null object\n",
      "ApplicationP        18941 non-null object\n",
      "OpeningDate         18295 non-null object\n",
      "Deadline            18936 non-null object\n",
      "Notes               2211 non-null object\n",
      "AboutC              12470 non-null object\n",
      "Attach              1559 non-null object\n",
      "Year                19001 non-null int64\n",
      "Month               19001 non-null int64\n",
      "IT                  19001 non-null bool\n",
      "dtypes: bool(1), int64(2), object(21)\n",
      "memory usage: 3.4+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2012    2149\n",
       "2015    2009\n",
       "2013    2009\n",
       "2014    1983\n",
       "2008    1785\n",
       "2011    1697\n",
       "2007    1538\n",
       "2010    1511\n",
       "2009    1191\n",
       "2005    1138\n",
       "2006    1116\n",
       "2004     875\n",
       "Name: Year, dtype: int64"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Year'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_clean = df.copy()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "elect all nondescriptive and misspelled column headers (ApplicationP, AboutC, RequiredQual, JobRequirment) and replace them with full words (ApplicationProcedure, AboutCompany, RequiredQualifications, JobRequirement)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_clean  = df_clean.rename(columns= {'ApplicationP': 'Application_Procedure',\n",
    "                                      'AboutC': 'About_Company', \n",
    "                                      'RequiredQual' : 'Required_Qualifications',\n",
    "                                     'JobRequirment' : 'Job_Requirements',\n",
    "                                     'StartDate': 'Start_Date'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 19001 entries, 0 to 19000\n",
      "Data columns (total 24 columns):\n",
      "jobpost                    19001 non-null object\n",
      "date                       19001 non-null object\n",
      "Title                      18973 non-null object\n",
      "Company                    18994 non-null object\n",
      "AnnouncementCode           1208 non-null object\n",
      "Term                       7676 non-null object\n",
      "Eligibility                4930 non-null object\n",
      "Audience                   640 non-null object\n",
      "Start_Date                 9675 non-null object\n",
      "Duration                   10798 non-null object\n",
      "Location                   18969 non-null object\n",
      "JobDescription             15109 non-null object\n",
      "Job_Requirements           16479 non-null object\n",
      "Required_Qualifications    18517 non-null object\n",
      "Salary                     9622 non-null object\n",
      "Application_Procedure      18941 non-null object\n",
      "OpeningDate                18295 non-null object\n",
      "Deadline                   18936 non-null object\n",
      "Notes                      2211 non-null object\n",
      "About_Company              12470 non-null object\n",
      "Attach                     1559 non-null object\n",
      "Year                       19001 non-null int64\n",
      "Month                      19001 non-null int64\n",
      "IT                         19001 non-null bool\n",
      "dtypes: bool(1), int64(2), object(21)\n",
      "memory usage: 3.4+ MB\n"
     ]
    }
   ],
   "source": [
    "df_clean.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Select all records in the StartDate column that have \"As soon as possible\", \"Immediately\", etc. and replace the text in those cells with \"ASAP\"\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ASAP                               4754\n",
       "Immediately                         773\n",
       "As soon as possible                 543\n",
       "Upon hiring                         261\n",
       "Immediate                           259\n",
       "Immediate employment                140\n",
       "As soon as possible.                 32\n",
       "01 September 2012                    31\n",
       "March 2006                           27\n",
       "November 2006                        22\n",
       "January 2010                         19\n",
       "01 February 2005                     17\n",
       "Immediate job opportunity            17\n",
       "February 2014                        17\n",
       "September 2010                       16\n",
       "February 2011                        16\n",
       "TBD                                  16\n",
       "September 2008                       15\n",
       "March 2011                           15\n",
       "01 July 2014                         14\n",
       "February 2007                        14\n",
       "01 February 2015                     14\n",
       "01 September 2008                    13\n",
       "01 March 2006                        13\n",
       "January 2016                         13\n",
       "01 September 2010                    13\n",
       "June 2008                            12\n",
       "September 2013                       12\n",
       "01 October 2008                      12\n",
       "01 March 2012                        12\n",
       "                                   ... \n",
       "03 April 2006                         1\n",
       "20 June 2013                          1\n",
       "As soon as the shop opens             1\n",
       "07 June 2010                          1\n",
       "May 2009                              1\n",
       "22 February 2012                      1\n",
       "July/ August 2012                     1\n",
       "ASAP starting 10 February 2006        1\n",
       "27 February 2012                      1\n",
       "Not later than 01 January 2011        1\n",
       "Late September                        1\n",
       "End of March                          1\n",
       "October/ November 2012                1\n",
       "21 June 2007                          1\n",
       "10  August 2009                       1\n",
       "20 July 04                            1\n",
       "30 July 2015                          1\n",
       "02 November 2009                      1\n",
       "21 December 2006                      1\n",
       "26 February 2006                      1\n",
       "December 2010 or January 2011         1\n",
       "Shortly after declared deadline       1\n",
       "12 November 2014                      1\n",
       "15 November 2012                      1\n",
       "Mid April                             1\n",
       "Late August 2004                      1\n",
       "05 March 2012                         1\n",
       "28 March 2005                         1\n",
       "June/ July                            1\n",
       "15 November 2013                      1\n",
       "Name: Start_Date, Length: 1186, dtype: int64"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clean['Start_Date'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "asap_list = ['Immediately', 'As soon as possible', 'Upon hiring',\n",
    "             'Immediate', 'Immediate employment', 'As soon as possible.', 'Immediate job opportunity',\n",
    "             '\"Immediate employment, after passing the interview.\"',\n",
    "             'ASAP preferred', 'Employment contract signature date',\n",
    "             'Immediate employment opportunity', 'Immidiately', 'ASA',\n",
    "             'Asap', '\"The position is open immediately but has a flexible start date depending on the candidates earliest availability.\"',\n",
    "             'Immediately upon agreement', '20 November 2014 or ASAP',\n",
    "             'immediately', 'Immediatelly',\n",
    "             '\"Immediately upon selection or no later than November 15, 2009.\"',\n",
    "             'Immediate job opening', 'Immediate hiring', 'Upon selection',\n",
    "             'As soon as practical', 'Immadiate', 'As soon as posible',\n",
    "             'Immediately with 2 months probation period',\n",
    "             '12 November 2012 or ASAP', 'Immediate employment after passing the interview',\n",
    "             'Immediately/ upon agreement', '01 September 2014 or ASAP',\n",
    "             'Immediately or as per agreement', 'as soon as possible',\n",
    "             'As soon as Possible', 'in the nearest future', 'immediate',\n",
    "             '01 April 2014 or ASAP', 'Immidiatly', 'Urgent',\n",
    "             'Immediate or earliest possible', 'Immediate hire',\n",
    "             'Earliest  possible', 'ASAP with 3 months probation period.',\n",
    "             'Immediate employment opportunity.', 'Immediate employment.',\n",
    "             'Immidietly', 'Imminent', 'September 2014 or ASAP', 'Imediately']\n",
    "\n",
    "for phrase in asap_list:\n",
    "    df_clean.Start_Date.replace(phrase, 'ASAP', inplace = True)\n",
    "    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ASAP                               6856\n",
       "01 September 2012                    31\n",
       "March 2006                           27\n",
       "November 2006                        22\n",
       "January 2010                         19\n",
       "01 February 2005                     17\n",
       "February 2014                        17\n",
       "September 2010                       16\n",
       "TBD                                  16\n",
       "February 2011                        16\n",
       "March 2011                           15\n",
       "September 2008                       15\n",
       "February 2007                        14\n",
       "01 July 2014                         14\n",
       "01 February 2015                     14\n",
       "01 March 2006                        13\n",
       "January 2016                         13\n",
       "01 September 2008                    13\n",
       "01 September 2010                    13\n",
       "Fall 2010                            12\n",
       "June 2008                            12\n",
       "01 October 2008                      12\n",
       "September 2013                       12\n",
       "01 April 2014                        12\n",
       "01 October 2012                      12\n",
       "01 March 2012                        12\n",
       "01 September 2004                    11\n",
       "February 2008                        11\n",
       "01 September 2013                    11\n",
       "01 February 2012                     11\n",
       "                                   ... \n",
       "November 2008                         1\n",
       "April 2014 or ASAP                    1\n",
       "June/ July                            1\n",
       "Late August 2004                      1\n",
       "20 July 2006                          1\n",
       "Mid April                             1\n",
       "04 November 2013, 16:00               1\n",
       "04 March 2013                         1\n",
       "30 November 2004                      1\n",
       "17 June 2009                          1\n",
       "07 June 2010                          1\n",
       "22 February 2012                      1\n",
       "July/ August 2012                     1\n",
       "ASAP starting 10 February 2006        1\n",
       "27 February 2012                      1\n",
       "Not later than 01 January 2011        1\n",
       "Late September                        1\n",
       "End of March                          1\n",
       "October/ November 2012                1\n",
       "21 June 2007                          1\n",
       "10  August 2009                       1\n",
       "May 2009                              1\n",
       "30 July 2015                          1\n",
       "21 December 2006                      1\n",
       "26 February 2006                      1\n",
       "December 2010 or January 2011         1\n",
       "Shortly after declared deadline       1\n",
       "12 November 2014                      1\n",
       "15 November 2012                      1\n",
       "15 November 2013                      1\n",
       "Name: Start_Date, Length: 1140, dtype: int64"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clean['Start_Date'].value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In the Jupyter Notebook below, write an assert statement to verify that none of the phrases similar to 'ASAP' remain in the StartDate column, which implies that they were converted to 'ASAP'.\n",
    "\n",
    "if assertion statement is false....you will get error."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "ename": "AssertionError",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mAssertionError\u001b[0m                            Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-31-46746b415643>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[1;32massert\u001b[0m \u001b[1;36m2\u001b[0m \u001b[1;33m+\u001b[0m \u001b[1;36m2\u001b[0m \u001b[1;33m==\u001b[0m \u001b[1;36m6\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mAssertionError\u001b[0m: "
     ]
    }
   ],
   "source": [
    "assert 2 + 2 == 6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "for phrase in asap_list:\n",
    "    assert phrase not in df_clean.Start_Date.values\n",
    "    \n",
    "# if there is no error, then we are good!"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Analysis and Visualization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "70.86 %\n"
     ]
    }
   ],
   "source": [
    "# percentage of postings looking for someone to start asap\n",
    "\n",
    "ASAP = df_clean.Start_Date.value_counts()['ASAP']\n",
    "\n",
    "Other_Start= df_clean.Start_Date.count()\n",
    "\n",
    "percentage =round(ASAP / Other_Start *100, 2)\n",
    "\n",
    "print(percentage,'%')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "6856"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_clean['Start_Date'].value_counts()['ASAP']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "labels = np.full(len(df_clean.Start_Date.value_counts()), '', dtype = object)\n",
    "\n",
    "labels[0] = 'ASAP'\n",
    "\n",
    "df_clean.Start_Date.value_counts().plot(kind = 'pie', labels = labels);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
